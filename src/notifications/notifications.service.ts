import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Raw } from 'typeorm';
import { Notification } from './notification.entity';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom } from 'rxjs';

@Injectable()
export class NotificationsService {
	constructor(
		@InjectRepository(Notification)
		private notificationRepo: Repository<Notification>,
		private httpService: HttpService
	) { }

	async create(data: Partial<Notification>) {
		console.log('üì§ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
		const notification = this.notificationRepo.create(data);
		console.log('üõ†Ô∏è –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notification);
		try {
			const saved = await this.notificationRepo.save(notification);
			console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', saved);
			return saved;
		} catch (err) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', err);
			throw err;
		}
	}

	findByRecipient(recipient_id: string) {
		return this.notificationRepo.find({
			where: { 
				recipient_id,
				hidden_by_user: false  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			},
			order: { created_at: 'DESC' },
		});
	}

	updateStatus(id: string, status: string) {
		return this.notificationRepo.update(id, { status });
	}

	updateNotification(id: string, updateData: Partial<Notification>) {
		return this.notificationRepo.update(id, updateData);
	}

	async hideNotificationForStudent(id: string) {
		return this.notificationRepo.update(id, { hidden_by_user: true });
	}

	async findByLessonId(lessonId: string): Promise<Notification | undefined> {
		console.log('[NotificationsService] –ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ lessonId:', lessonId);
		// –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ booking_proposal (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
		let notif = await this.notificationRepo.findOne({
			where: {
				type: 'booking_proposal',
				data: Raw(alias => `${alias} ->> 'lessonId' = '${lessonId}'`)
			}
		});
		
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ booking_proposal, –∏—â–µ–º booking_request
		if (!notif) {
			notif = await this.notificationRepo.findOne({
				where: {
					type: 'booking_request',
					data: Raw(alias => `${alias} ->> 'lessonId' = '${lessonId}'`)
				}
			});
		}
		
		console.log('[NotificationsService] –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notif);
		return notif;
	}

	async getNotificationByLessonId(lessonId: string): Promise<Notification | undefined> {
		const notifResp = await lastValueFrom(
			this.httpService.get(`http://localhost:3003/notifications/by-lesson/${lessonId}`)
		);
		return (notifResp as any).data as Notification;
	}

	async updateNotificationStatus(notification: Notification, accepted: boolean): Promise<void> {
		await lastValueFrom(
			this.httpService.patch(
				`http://localhost:3003/notifications/${notification.id}`,
				{ status: accepted ? 'accepted' : 'rejected' }
			)
		);
	}

	async fixMissingTeacherNames(): Promise<any> {
		console.log('[NotificationsService] –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π');
		
		// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ booking_proposal –±–µ–∑ teacherName
		const notifications = await this.notificationRepo.find({
			where: { type: 'booking_proposal' }
		});

		console.log(`[NotificationsService] –ù–∞–π–¥–µ–Ω–æ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–∏–ø–∞ booking_proposal`);
		
		let updatedCount = 0;
		
		for (const notification of notifications) {
			try {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ teacherName
				if (notification.data?.teacherName) {
					console.log(`[NotificationsService] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notification.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç teacherName`);
					continue;
				}

				// –ü–æ–ª—É—á–∞–µ–º lessonId
				const lessonId = notification.data?.lessonId;
				if (!lessonId) {
					console.log(`[NotificationsService] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notification.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç lessonId`);
					continue;
				}

				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
				const lessonResp = await lastValueFrom(
					this.httpService.get(`http://localhost:3004/lessons/${lessonId}`)
				);
				
				const lesson = lessonResp.data;
				if (!lesson || !lesson.teacherName) {
					console.log(`[NotificationsService] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –¥–ª—è —É—Ä–æ–∫–∞ ${lessonId}`);
					continue;
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º data —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
				const updatedData = {
					...notification.data,
					teacherId: lesson.teacherId,
					teacherName: lesson.teacherName
				};

				await this.notificationRepo.update(notification.id, {
					data: updatedData
				});

				console.log(`[NotificationsService] –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notification.id} —Å teacherName: ${lesson.teacherName}`);
				updatedCount++;

			} catch (error) {
				console.error(`[NotificationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notification.id}:`, error);
			}
		}

		console.log(`[NotificationsService] –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
		return { success: true, updatedCount };
	}
}
